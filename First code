import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Simulate synthetic urban planning dataset
def generate_urban_data(n_samples=500):
    np.random.seed(42)
    data = {
        'green_space_percentage': np.random.uniform(0, 100, n_samples),
        'building_density': np.random.uniform(0, 10, n_samples),  # buildings per hectare
        'road_network_density': np.random.uniform(0, 20, n_samples),  # km/km²
        'water_infrastructure': np.random.uniform(0, 1, n_samples),  # normalized score
        'population_density': np.random.uniform(1000, 10000, n_samples),  # people/km²
        'resilience_index': None  # Target variable
    }

    df = pd.DataFrame(data)
    
    # Target variable: resilience index (higher is better)
    df['resilience_index'] = (
        0.5 * df['green_space_percentage'] 
        - 0.3 * df['building_density'] 
        - 0.2 * df['road_network_density'] 
        + 0.4 * df['water_infrastructure'] * 100
        - 0.2 * df['population_density'] / 1000
        + np.random.normal(0, 5, n_samples)  # noise
    )
    return df

# Generate data
df = generate_urban_data()

# Features and target
X = df.drop(columns=['resilience_index'])
y = df['resilience_index']

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ML Model - Random Forest
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluation
y_pred = model.predict(X_test)
print(f"Test MSE: {mean_squared_error(y_test, y_pred):.2f}")
print(f"Test R2 Score: {r2_score(y_test, y_pred):.2f}")

# New urban design recommendation: find optimal parameters
def recommend_design(model, n_recommendations=5):
    recommendations = []
    for _ in range(n_recommendations):
        design = {
            'green_space_percentage': np.random.uniform(30, 70),
            'building_density': np.random.uniform(1, 5),
            'road_network_density': np.random.uniform(5, 15),
            'water_infrastructure': np.random.uniform(0.5, 1),
            'population_density': np.random.uniform(2000, 7000)
        }
        df_design = pd.DataFrame([design])
        predicted_resilience = model.predict(df_design)[0]
        design['predicted_resilience_index'] = predicted_resilience
        recommendations.append(design)
    
    recommendations = sorted(recommendations, key=lambda x: x['predicted_resilience_index'], reverse=True)
    return pd.DataFrame(recommendations)

# Get recommendations
recommendations = recommend_design(model)
print("\nTop Climate-Resilient Urban Design Recommendations:")
print(recommendations)

# Export recommendations to Excel
recommendations.to_excel('urban_planning_recommendations.xlsx', index=False)
